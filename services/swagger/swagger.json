{
    "openapi": "3.0.2",
    "info": {
        "version": "0.0.1",
        "title": "Users Service",
        "description": "Swagger spec for documenting the users service."
    },
    "servers": [
        {
<<<<<<< HEAD
            "url": "http://testdriven-staging-alb-1014464409.us-east-1.elb.amazonaws.com"
=======
            "url": "http://testdriven-staging-alb-2074969383.us-east-1.elb.amazonaws.com"
>>>>>>> 423ff83a0bd04323ca2dd0ec847003acf3cce9c1
        }
    ],
    "paths": {
        "/users/ping": {
            "get": {
                "summary": "Just a sanity check.",
                "responses": {
                    "200": {
                        "description": "Will return 'pong!'"
                    }
                }
            }
        },
        "/users": {
            "get": {
                "summary": "Returns all users.",
                "responses": {
                    "200": {
                        "description": "user object"
                    }
                }
            },
            "post": {
                "summary": "Adds a new user.",
                "requestBody": {
                    "description": "User to add.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/user-full"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User added."
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "summary": "Returns a user based on a single user ID.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of user to fetch.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "user object"
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "summary": "Creates a new user.",
                "requestBody": {
                    "description": "User to add.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/user-full"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "user object"
                    },
                    "400": {
                        "description": "Bad request."
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "summary": "Logs a user in.",
                "requestBody": {
                    "description": "User to log in.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/user"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successfully logged in."
                    },
                    "400": {
                        "description": "Bad request. Invalid payload."
                    },
                    "404": {
                        "description": "Not found. User does not exist."
                    },
                    "500": {
                        "description": "Internal server error. Try again."
                    }
                }
            }
        },
        "/auth/status": {
            "get": {
                "summary": "Returns the logged in user's status.",
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "user object"
                    }
                }
            }
        },
        "/auth/logout": {
            "get": {
                "summary": "Logs a user out.",
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully logged out."
                    }
                }
            }
        }
    },
    "components": {
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "scheme": "bearer"
            }
        },
        "schemas": {
            "user": {
                "properties": {
                    "email": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    }
                }
            },
            "user-full": {
                "properties": {
                    "username": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    }
                }
            }
        }
    }
}
